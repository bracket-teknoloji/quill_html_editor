// Autogenerated from Pigeon (v22.7.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import "dart:async";
import "dart:typed_data" show Float64List, Int32List, Int64List, Uint8List;

import "package:flutter/foundation.dart" show ReadBuffer, WriteBuffer;
import "package:flutter/services.dart";

PlatformException _createConnectionError(String channelName) =>
    PlatformException(code: "channel-error", message: 'Unable to establish connection on channel: "$channelName".');

class PrinterList {
  PrinterList({required this.printers});

  List<PrinterDetails> printers;

  Object encode() => <Object?>[printers];

  static PrinterList decode(Object result) {
    result as List<Object?>;
    return PrinterList(printers: (result[0] as List<Object?>?)!.cast<PrinterDetails>());
  }
}

class PrinterDetails {
  PrinterDetails({
    required this.connected,
    required this.connectionID,
    required this.name,
    required this.modelNumber,
    required this.serialNumber,
    this.width,
    this.height,
  });

  bool connected;

  int connectionID;

  String name;

  String modelNumber;

  String serialNumber;

  int? width;

  int? height;

  Object encode() => <Object?>[connected, connectionID, name, modelNumber, serialNumber, width, height];

  static PrinterDetails decode(Object result) {
    result as List<Object?>;
    return PrinterDetails(
      connected: result[0]! as bool,
      connectionID: result[1]! as int,
      name: result[2]! as String,
      modelNumber: result[3]! as String,
      serialNumber: result[4]! as String,
      width: result[5] as int?,
      height: result[6] as int?,
    );
  }
}

class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer..putUint8(4)
      ..putInt64(value);
    } else if (value is PrinterList) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is PrinterDetails) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129:
        return PrinterList.decode(readValue(buffer)!);
      case 130:
        return PrinterDetails.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

/// Sewoo is a Bluetooth printer
class Sewoo {
  /// Constructor for [Sewoo].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  Sewoo({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ""})
    : pigeonVar_binaryMessenger = binaryMessenger,
      pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? ".$messageChannelSuffix" : "";
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<bool> openPort() async {
    final String pigeonVar_channelName = "dev.flutter.pigeon.picker.Sewoo.openPort$pigeonVar_messageChannelSuffix";
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList = await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: "null-error",
        message: "Host platform returned null value for non-null return value.",
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> closePort() async {
    final String pigeonVar_channelName = "dev.flutter.pigeon.picker.Sewoo.closePort$pigeonVar_messageChannelSuffix";
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList = await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: "null-error",
        message: "Host platform returned null value for non-null return value.",
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> printText(String text) async {
    final String pigeonVar_channelName = "dev.flutter.pigeon.picker.Sewoo.printText$pigeonVar_messageChannelSuffix";
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList = await pigeonVar_channel.send(<Object?>[text]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: "null-error",
        message: "Host platform returned null value for non-null return value.",
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> printImage(Int64List image, int width, int height) async {
    final String pigeonVar_channelName = "dev.flutter.pigeon.picker.Sewoo.printImage$pigeonVar_messageChannelSuffix";
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[image, width, height]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: "null-error",
        message: "Host platform returned null value for non-null return value.",
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> printPDF(Int64List pdfData, int width, int height) async {
    final String pigeonVar_channelName = "dev.flutter.pigeon.picker.Sewoo.printPDF$pigeonVar_messageChannelSuffix";
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[pdfData, width, height]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: "null-error",
        message: "Host platform returned null value for non-null return value.",
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<PrinterList?> checkConnectedAccessories() async {
    final String pigeonVar_channelName =
        "dev.flutter.pigeon.picker.Sewoo.checkConnectedAccessories$pigeonVar_messageChannelSuffix";
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList = await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as PrinterList?);
    }
  }
}
