// Autogenerated from Pigeon (v22.7.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package com.bracket25.sewoo

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is FlutterError) {
    listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/** Generated class from Pigeon that represents data sent in messages. */
data class PrinterList (
  val printers: List<PrinterDetails>
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PrinterList {
      val printers = pigeonVar_list[0] as List<PrinterDetails>
      return PrinterList(printers)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      printers,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PrinterDetails (
  val connected: Boolean,
  val connectionID: Long,
  val name: String,
  val modelNumber: String,
  val serialNumber: String,
  val width: Long? = null,
  val height: Long? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PrinterDetails {
      val connected = pigeonVar_list[0] as Boolean
      val connectionID = pigeonVar_list[1] as Long
      val name = pigeonVar_list[2] as String
      val modelNumber = pigeonVar_list[3] as String
      val serialNumber = pigeonVar_list[4] as String
      val width = pigeonVar_list[5] as Long?
      val height = pigeonVar_list[6] as Long?
      return PrinterDetails(connected, connectionID, name, modelNumber, serialNumber, width, height)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      connected,
      connectionID,
      name,
      modelNumber,
      serialNumber,
      width,
      height,
    )
  }
}
private open class SewooPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PrinterList.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PrinterDetails.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is PrinterList -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is PrinterDetails -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}


/**
 * Sewoo is a Bluetooth printer
 *
 * Generated interface from Pigeon that represents a handler of messages from Flutter.
 */
interface Sewoo {
  fun openPort(): Boolean
  fun closePort(): Boolean
  fun printText(text: String, callback: (Result<Boolean>) -> Unit)
  fun printImage(image: LongArray, width: Long, height: Long, callback: (Result<Boolean>) -> Unit)
  fun printPDF(pdfData: LongArray, width: Long, height: Long, callback: (Result<Boolean>) -> Unit)
  fun checkConnectedAccessories(): PrinterList?

  companion object {
    /** The codec used by Sewoo. */
    val codec: MessageCodec<Any?> by lazy {
      SewooPigeonCodec()
    }
    /** Sets up an instance of `Sewoo` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: Sewoo?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.picker.Sewoo.openPort$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.openPort())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.picker.Sewoo.closePort$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.closePort())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.picker.Sewoo.printText$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val textArg = args[0] as String
            api.printText(textArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.picker.Sewoo.printImage$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val imageArg = args[0] as LongArray
            val widthArg = args[1] as Long
            val heightArg = args[2] as Long
            api.printImage(imageArg, widthArg, heightArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.picker.Sewoo.printPDF$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pdfDataArg = args[0] as LongArray
            val widthArg = args[1] as Long
            val heightArg = args[2] as Long
            api.printPDF(pdfDataArg, widthArg, heightArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.picker.Sewoo.checkConnectedAccessories$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.checkConnectedAccessories())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
